import { AuthModalOptions, CreateAuthModalCallback } from './auth-modal';
import { GetEndpointOverride } from './util';
declare type FetchParams = Parameters<typeof fetch>;
declare type ConfirmStepUpOptions = {
    mode: 'confirm';
    message?: string;
};
declare type ModalStepUpOptions = {
    mode: 'modal';
    createModal?: CreateAuthModalCallback;
} & AuthModalOptions;
declare type FollowStepUpOptions = ConfirmStepUpOptions | ModalStepUpOptions;
declare type FetchFunction = (...args: FetchParams) => Promise<Response>;
declare type SentryOptions = {
    debug?: boolean;
    getEndpointOverride?: GetEndpointOverride;
    preserveRedirectUri?: boolean;
    failOnInvalidSession?: boolean;
    followMidwayStepUp?: true | 'mfa' | 'selective_mfa';
    followMidwayStepUpOptions?: FollowStepUpOptions;
    /**
     * Required if overriding `window.fetch` with `sentryFetch`
     *
     * @remarks
     * Passing the global fetch() method (could be polyfill) to this param is absolutely required else it'll
     * infinite loop since the `window.fetch` function at the time of invoking sentryFetch/performAuthenticationSteps
     * is probably already overridden with `sentryFetch`.
     */
    fetchFunction?: FetchFunction;
};
declare type SentryRequestInit = RequestInit & {
    sentryOptions?: SentryOptions;
};
/** Enumerates the well-known errors that can occur. */
export declare enum SentryError {
    /**
     * The Midway auth modal has failed to authenticate the user.
     * This error occurs when `followMidwayStepUp` and `followMidwayStepUpOptions.mode == 'modal'` are set, the user does not have a valid Midway session, and the modal encounters an error (e.g. popups are blocked).
     */
    MIDWAY_AUTH_MODAL_FAILED = "AUTH_MODAL_FAILED",
    /**
     * The user has been redirected to Midway.
     * This error occurs when `followMidwayStepUp` is enabled, the user does not have a valid Midway session, and the redirect is not cancelled.
     */
    MIDWAY_REDIRECT = "MIDWAY_REDIRECT",
    /**
     * The user has cancelled the redirect to Midway.
     * This error occurs when `followMidwayStepUp` and `followMidwayStepUpOptions.mode == 'modal'` are set, the user does not have a valid Midway session, and the redirect is cancelled.
     */
    MIDWAY_REDIRECT_CANCELLED = "MIDWAY_REDIRECT_CANCELLED",
    /**
     * The endpoint is protected by Midway and the user does not have a valid Midway session (i.e. they must re-authenticate using a security key).
     * This error only occurs when `followMidwayStepUp` is disabled or when `failOnInvalidSession` is enabled.
     */
    NO_MIDWAY_SESSION = "NO_MIDWAY_SESSION"
}
/** An error object for NO_MIDWAY_SESSION */
export declare const NO_MIDWAY_SESSION_ERROR: Readonly<Error>;
export declare const configure: (sentryOptions?: SentryOptions) => (url: RequestInfo | URL, options?: SentryRequestInit) => Promise<Response>;
/**
 * Checks authentication before making desired request. If not authenticated, a new authentication token will be
 * requested and either validated or included with the request, depending on the server's configuration.
 */
export default function sentryFetch(url: RequestInfo | URL, options?: SentryRequestInit): Promise<Response>;
export {};
